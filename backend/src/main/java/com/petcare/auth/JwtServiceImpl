package com.petcare.user;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Service;

import java.security.Key;
import java.util.Date;

@Service
public class JwtServiceImpl implements JwtService {

    // üîë Chave secreta ‚Äî em produ√ß√£o, use algo seguro e armazenado fora do c√≥digo
    private static final Key SECRET_KEY = Keys.secretKeyFor(SignatureAlgorithm.HS256);

    // ‚è≥ Tempo de expira√ß√£o (8h)
    private static final long EXPIRATION_TIME = 1000 * 60 * 60 * 8;

    @Override
    public String generateToken(User user) {
        return Jwts.builder()
                .setSubject(user.getEmail()) // usamos o email como identificador
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(SECRET_KEY)
                .compact();
    }

    @Override
    public boolean validateToken(String token) {
        try {
            getAllClaims(token); // se conseguir ler, √© v√°lido
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    @Override
    public String getUsernameFromToken(String token) {
        return getAllClaims(token).getSubject();
    }

    private Claims getAllClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(SECRET_KEY)
                .build()
                .parseClaimsJws(token)
                .getBody();
    }
}
